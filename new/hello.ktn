data float {}
data int {}
data bool {}
data io {}
data fail {}

// 1 ignore

trait copy<A> (A -> A, A)

// _Z4copyIiEiPiPi
instance copy (int -> int, int) {
  _::magic
  // int sizeof _::intrinsic::copy_bytes
}

// _Z4copyIdEdPdPd
instance copy (float -> float, float) {
  _::magic
  // float sizeof _::intrinsic::copy_bytes
}

define blopy (int -> int, int) {
  -> x;
  x x  // Implicitly invoke copy trait.
}


data vector<A> {}

define foo (-> vector<int>) {
  [1, 2]
}

define dup<A> (A -> A, A):
  -> x;
  x x

define ignore<A> (A ->):
  -> _;

define ignore2<A> (A ->):
  -> x;

define blah (optional<int>, int -> int) {
  -> test, x;
  match (test) {
    case optional::some { ignore x }
    else {
      ignore x x ignore
    }
  }
}

define both<A, B, C, D, +E> (A, B, (A -> C +E), (B -> D +E) -> C, D +E):
  -> x, y, f, g;
  x f call
  y g call

define call<R..., S..., +E> (R..., (R... -> S... +E) -> S... +E):
  _::magic

define push_back<A> (vector<A>, A -> vector<A>):
  _::magic

define pop_back<A> (vector<A> -> optional<pair<vector<A>, A>>):
  _::magic

data pair<A, B>:
  case pair (A, B)

define from_pair<A, B> (pair<A, B> -> A, B):
  _::magic

data optional<A>:
  case none
  case some (A)

define is_some<A> (optional<A> -> bool +fail):
  match:
    case optional::some -> _:
      true
    case optional::none:
      false

define abort<R..., S..., +E> (R... -> S... +fail +E):
  _::magic

define from_some<A> (optional<A> -> A +fail):
  match:
    case optional::some {}
    else:
      _::abort

define + (int, int -> int) { _::magic }
infix right 6 +

define - (int, int -> int) { _::magic }
infix left 6 -

define * (int, int -> int) { _::magic }
infix left 7 *

define / (int, int -> int) { _::magic }
infix left 7 /

define >= (int, int -> int) { _::magic }
define >> (int, int -> int) { _::magic }
define >>= (int, int -> int) { _::magic }
define >>> (int, int -> int) { _::magic }
define foo1 (-> int) { 1 >> 2 }
define foo2 (-> int) { 1 >>> 2 }

define sqrt (int -> int) { _::magic }

define say<a> (a -> +io) { _::magic }

define scope (-> +io) {
  1000 -> x1;
  100 -> y1;
  10
  {
    -> a1;
    (a1 + x1)
    {
      -> b1;
      b1 + y1
    } call
  } call
  say
  1000 -> x2;
  100 -> y2;
  10
  {
    -> a2;
    (a2 + y2)
    {
      -> b2;
      b2 + x2
    } call
  } call
  say
}

vocab foo::bar {

define quadratic (int, int, int -> int):
  -> a, b, c;
  (a + (b * b - 4 * a * c) sqrt) / (2 * a)

}

define concat<A> (vector<vector<A>> -> vector<A>) { _::magic }

define test<R..., +E> (R..., (R... -> R... +E) -> R... +E) {
  if (true) {
    -> f;
    f call
    f test
  } else {
    -> _;
  }
}

// define map<R..., A, B, +E> (R..., vector<A>, <S...> (S..., A -> S..., B +E) -> R..., vector<B> +E)
define map<A, B, +E> (vector<A>, (A -> B +fail +E) -> vector<B> +fail +E)
{
  -> xs, f;
  xs pop_back
  dup
  if (is_some) {
    from_some from_pair
    {f map} {f call} both push_back
  } else {
    ignore []
  }
}

/*
// define map<R..., A, B, +E> (R..., vector<A>, (R..., A -> R..., B +E) -> R..., vector<B> +E):
define map<A, B, +E> (vector<A>, (A -> B +E) -> vector<B> +E):
  -> xs, f;
  match (xs pop_back):
    case optional::some:
      from_pair -> ys, y;
      ys f map
      y f call
      push_back
    case optional::none:
      []
*/

define optional_test (-> int +fail) {
  1 optional::some
  match {
    case optional::some {
      (+ 1)
    }
    case optional::none {
      0
    }
  }
}
