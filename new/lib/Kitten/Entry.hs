{-# LANGUAGE OverloadedStrings #-}

module Kitten.Entry
  ( Entry(..)
  ) where

import Kitten.Entry.Category (Category)
import Kitten.Entry.Parameter (Parameter)
import Kitten.Entry.Parent (Parent)
import Kitten.Entry.Merge (Merge)
import Kitten.Name (Qualified)
import Kitten.Origin (Origin)
import Kitten.Signature (Signature)
import Kitten.Term (Term)
import Kitten.Type (Type)
import Text.PrettyPrint.HughesPJClass (Pretty(..))

data Entry

-- A word definition. If the implementation is 'Nothing', this is a declaration:
-- it can be used for type checking and name resolution, but not compilation. If
-- the parent is a trait, this is a trait instance, with instance mangling. If
-- the parent is a type, this is a constructor. Definitions without signatures
-- are disallowed by the surface syntax, but they are generated for lifted
-- lambdas, as those have already been typechecked by the time quotations are
-- flattened into top-level definitions.

  = Word !Category !Merge !Origin !(Maybe Parent) !(Maybe Signature)
    !(Maybe (Term Type))

-- Untyped metadata. Used internally for operator metadata.

  | Metadata !Origin !(Term ())

-- A link to another entry in the dictionary. Generated by imports and synonym
-- declarations.

  | Synonym !Origin !Qualified

-- A trait to which other entries can link.

  | Trait !Origin !Signature

-- A data type with some generic parameters.

  | Type !Origin [Parameter]

  deriving (Show)

-- TODO: Better instance.
instance Pretty Entry where
  pPrint entry = case entry of
    Word _category _merge _origin _parent _signature _body -> "<word>"
    Metadata _origin _term -> "<metadata>"
    Synonym _origin _name -> "<synonym>"
    Trait _origin _signature -> "<signature>"
    Type _origin _parameters -> "<type>"
